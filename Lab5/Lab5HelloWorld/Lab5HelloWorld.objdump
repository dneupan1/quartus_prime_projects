
Lab5HelloWorld.elf:     file format elf32-littlenios2
Lab5HelloWorld.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080020

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000001fc memsz 0x000001fc flags r-x
    LOAD off    0x0000121c vaddr 0x0008021c paddr 0x00080220 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00000224 vaddr 0x00080224 paddr 0x00080224 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00080020  00080020  00001220  2**0
                  CONTENTS
  2 .text         000001e4  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00080204  00080204  00001204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  0008021c  00080220  0000121c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00080224  00080224  00001224  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00080230  00080230  00001220  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  00001250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00000b7c  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000787  00000000  00000000  00001f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000005d7  00000000  00000000  000026db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000001ac  00000000  00000000  00002cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000003ec  00000000  00000000  00002e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  0000324c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000020  00000000  00000000  00003260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005c  00000000  00000000  00003280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 0000060b  00000000  00000000  000032dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00000194  00000000  00000000  000038e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  0000489a  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0000489d  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000048a9  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000048aa  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000048ab  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000048b6  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000048c1  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  000048cc  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000063  00000000  00000000  000048d0  2**0
                  CONTENTS, READONLY
 28 .jdi          000049bd  00000000  00000000  00004933  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0002ca37  00000000  00000000  000092f0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080020 l    d  .text	00000000 .text
00080204 l    d  .rodata	00000000 .rodata
0008021c l    d  .rwdata	00000000 .rwdata
00080224 l    d  .bss	00000000 .bss
00080230 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 crt0.o
00080058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
000800f8 g     F .text	0000002c alt_main
00080220 g       *ABS*	00000000 __flash_rwdata_start
00080124 g     F .text	00000038 alt_putstr
000801b8 g     F .text	00000008 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00080228 g     O .bss	00000004 alt_argv
0008821c g       *ABS*	00000000 _gp
000801c0 g     F .text	00000028 memcpy
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00080230 g       *ABS*	00000000 __bss_end
000801b0 g     F .text	00000004 alt_dcache_flush_all
00080220 g       *ABS*	00000000 __ram_rwdata_end
0008021c g       *ABS*	00000000 __ram_rodata_end
0008021c g     O .rwdata	00000004 jtag_uart_0
00080230 g       *ABS*	00000000 end
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
00080180 g     F .text	00000030 altera_avalon_jtag_uart_write
00080020 g     F .text	0000003c _start
0008017c g     F .text	00000004 alt_sys_init
0008021c g       *ABS*	00000000 __ram_rwdata_start
00080204 g       *ABS*	00000000 __ram_rodata_start
00080230 g       *ABS*	00000000 __alt_stack_base
00080224 g       *ABS*	00000000 __bss_start
0008005c g     F .text	00000018 main
00080224 g     O .bss	00000004 alt_envp
00080204 g       *ABS*	00000000 __flash_rodata_start
0008015c g     F .text	00000020 alt_irq_init
0008022c g     O .bss	00000004 alt_argc
00080020 g       *ABS*	00000000 __ram_exceptions_start
00080220 g       *ABS*	00000000 _edata
00080230 g       *ABS*	00000000 _end
00080020 g       *ABS*	00000000 __ram_exceptions_end
000e1a80 g       *ABS*	00000000 __alt_data_end
0008000c g       .entry	00000000 _exit
000801e8 g     F .text	0000001c strlen
000801b4 g     F .text	00000004 alt_icache_flush_all
00080074 g     F .text	00000084 alt_load



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08400814 	ori	at,at,32
    jmp r1
   80008:	0800683a 	jmp	at

0008000c <_exit>:
	...

Disassembly of section .text:

00080020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80020:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   80024:	dec6a014 	ori	sp,sp,6784
    movhi gp, %hi(_gp)
   80028:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   8002c:	d6a08714 	ori	gp,gp,33308
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80030:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80034:	10808914 	ori	r2,r2,548

    movhi r3, %hi(__bss_end)
   80038:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   8003c:	18c08c14 	ori	r3,r3,560

    beq r2, r3, 1f
   80040:	10c00326 	beq	r2,r3,80050 <_start+0x30>

0:
    stw zero, (r2)
   80044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8004c:	10fffd36 	bltu	r2,r3,80044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80050:	00800740 	call	80074 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80054:	00800f80 	call	800f8 <alt_main>

00080058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80058:	003fff06 	br	80058 <alt_after_alt_main>

0008005c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
   8005c:	01000234 	movhi	r4,8
{ 
   80060:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
   80064:	21008104 	addi	r4,r4,516
{ 
   80068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
   8006c:	00801240 	call	80124 <alt_putstr>

  /* Event loop never exits. */
  while (1);
   80070:	003fff06 	br	80070 <main+0x14>

00080074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   80074:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   80078:	01000234 	movhi	r4,8
   8007c:	01400234 	movhi	r5,8
   80080:	dfc00015 	stw	ra,0(sp)
   80084:	21008704 	addi	r4,r4,540
   80088:	29408804 	addi	r5,r5,544
   8008c:	21400426 	beq	r4,r5,800a0 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
   80090:	01800234 	movhi	r6,8
   80094:	31808804 	addi	r6,r6,544
   80098:	310dc83a 	sub	r6,r6,r4
   8009c:	00801c00 	call	801c0 <memcpy>
  if (to != from)
   800a0:	01000234 	movhi	r4,8
   800a4:	01400234 	movhi	r5,8
   800a8:	21000804 	addi	r4,r4,32
   800ac:	29400804 	addi	r5,r5,32
   800b0:	21400426 	beq	r4,r5,800c4 <alt_load+0x50>
      *to++ = *from++;
   800b4:	01800234 	movhi	r6,8
   800b8:	31800804 	addi	r6,r6,32
   800bc:	310dc83a 	sub	r6,r6,r4
   800c0:	00801c00 	call	801c0 <memcpy>
  if (to != from)
   800c4:	01000234 	movhi	r4,8
   800c8:	01400234 	movhi	r5,8
   800cc:	21008104 	addi	r4,r4,516
   800d0:	29408104 	addi	r5,r5,516
   800d4:	21400426 	beq	r4,r5,800e8 <alt_load+0x74>
      *to++ = *from++;
   800d8:	01800234 	movhi	r6,8
   800dc:	31808704 	addi	r6,r6,540
   800e0:	310dc83a 	sub	r6,r6,r4
   800e4:	00801c00 	call	801c0 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   800e8:	00801b00 	call	801b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   800ec:	dfc00017 	ldw	ra,0(sp)
   800f0:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   800f4:	00801b41 	jmpi	801b4 <alt_icache_flush_all>

000800f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   800f8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   800fc:	0009883a 	mov	r4,zero
{
   80100:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   80104:	008015c0 	call	8015c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   80108:	008017c0 	call	8017c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   8010c:	d1a00217 	ldw	r6,-32760(gp)
   80110:	d1600317 	ldw	r5,-32756(gp)
   80114:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   80118:	dfc00017 	ldw	ra,0(sp)
   8011c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   80120:	008005c1 	jmpi	8005c <main>

00080124 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   80124:	defffe04 	addi	sp,sp,-8
   80128:	dc000015 	stw	r16,0(sp)
   8012c:	dfc00115 	stw	ra,4(sp)
   80130:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   80134:	00801e80 	call	801e8 <strlen>
   80138:	01000234 	movhi	r4,8
   8013c:	000f883a 	mov	r7,zero
   80140:	100d883a 	mov	r6,r2
   80144:	800b883a 	mov	r5,r16
   80148:	21008704 	addi	r4,r4,540
#else
    return fputs(str, stdout);
#endif
#endif
}
   8014c:	dfc00117 	ldw	ra,4(sp)
   80150:	dc000017 	ldw	r16,0(sp)
   80154:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   80158:	00801801 	jmpi	80180 <altera_avalon_jtag_uart_write>

0008015c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8015c:	deffff04 	addi	sp,sp,-4
   80160:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   80164:	00801b80 	call	801b8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   80168:	00800044 	movi	r2,1
   8016c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   80170:	dfc00017 	ldw	ra,0(sp)
   80174:	dec00104 	addi	sp,sp,4
   80178:	f800283a 	ret

0008017c <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
   8017c:	f800283a 	ret

00080180 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   80180:	21000017 	ldw	r4,0(r4)
{
   80184:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
   80188:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   8018c:	29800136 	bltu	r5,r6,80194 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   80190:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   80194:	20c00137 	ldwio	r3,4(r4)
   80198:	18ffffec 	andhi	r3,r3,65535
   8019c:	183ffb26 	beq	r3,zero,8018c <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   801a0:	28c00007 	ldb	r3,0(r5)
   801a4:	29400044 	addi	r5,r5,1
   801a8:	20c00035 	stwio	r3,0(r4)
   801ac:	003ff706 	br	8018c <altera_avalon_jtag_uart_write+0xc>

000801b0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   801b0:	f800283a 	ret

000801b4 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   801b4:	f800283a 	ret

000801b8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   801b8:	000170fa 	wrctl	ienable,zero
}
   801bc:	f800283a 	ret

000801c0 <memcpy>:
   801c0:	2005883a 	mov	r2,r4
   801c4:	0007883a 	mov	r3,zero
   801c8:	30c0011e 	bne	r6,r3,801d0 <memcpy+0x10>
   801cc:	f800283a 	ret
   801d0:	28cf883a 	add	r7,r5,r3
   801d4:	39c00003 	ldbu	r7,0(r7)
   801d8:	10c9883a 	add	r4,r2,r3
   801dc:	18c00044 	addi	r3,r3,1
   801e0:	21c00005 	stb	r7,0(r4)
   801e4:	003ff806 	br	801c8 <memcpy+0x8>

000801e8 <strlen>:
   801e8:	2005883a 	mov	r2,r4
   801ec:	10c00007 	ldb	r3,0(r2)
   801f0:	1800021e 	bne	r3,zero,801fc <strlen+0x14>
   801f4:	1105c83a 	sub	r2,r2,r4
   801f8:	f800283a 	ret
   801fc:	10800044 	addi	r2,r2,1
   80200:	003ffa06 	br	801ec <strlen+0x4>
